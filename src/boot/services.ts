/**
 * ÊúçÂãô‰æùË≥¥Ê≥®ÂÖ•Á≥ªÁµ±ÂïüÂãïÊ™îÊ°à
 * ÂàùÂßãÂåñ‰∏¶ÈÖçÁΩÆÊúçÂãôÂÆπÂô®
 */

import { boot } from 'quasar/wrappers'
import { container, SERVICE_TOKENS } from '@/services/infrastructure/container/service-container'
import { configureServices } from '@/services/infrastructure/container/service-providers'
import { provideServices } from '@/composables/useServices'

export default boot(({ app }) => {
  // ÈÖçÁΩÆÊúçÂãôÂÆπÂô®ÔºåË®ªÂÜäÊâÄÊúâÊúçÂãô
  configureServices(container)
  
  // Êèê‰æõÊúçÂãôÂÆπÂô®Âà∞ Vue ÊáâÁî®
  app.provide('ServiceContainer', container)
  
  // ‰πüÂèØ‰ª•‰ΩøÁî® composable ÊñπÂºèÊèê‰æõ
  provideServices(container)
  
  // ÈñãÁôºÁí∞Â¢É‰∏ãÈ°ØÁ§∫ÊúçÂãôË®ªÂÜä‰ø°ÊÅØ
  if (process.env.NODE_ENV === 'development') {
    console.group('üîß ‰æùË≥¥Ê≥®ÂÖ•Á≥ªÁµ±Â∑≤ÂàùÂßãÂåñ')
    console.log('ÊúçÂãôÂÆπÂô®:', container)
    
    // Ê™¢Êü•Ê†∏ÂøÉÊúçÂãôÊòØÂê¶Â∑≤Ë®ªÂÜä
    const coreServices = [
      'TASK_SERVICE',
      'PROJECT_SERVICE', 
      'USER_SERVICE',
      'EVENT_BUS',
      'COLUMN_CONFIG_SERVICE'
    ]
    
    console.log('Ê†∏ÂøÉÊúçÂãôË®ªÂÜäÁãÄÊ≥Å:')
    coreServices.forEach(serviceName => {
      const token = (SERVICE_TOKENS as any)[serviceName]
      const isRegistered = container.isRegistered(token)
      console.log(`  ${serviceName}: ${isRegistered ? '‚úÖ' : '‚ùå'}`)
    })
    
    console.groupEnd()
  }
})